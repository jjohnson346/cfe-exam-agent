version log

1.9.0

- added lucene component to support search functionality.  

This is currently a very rudimentary configuration, consistent with the example shown in chapter 1
of McCandless, Lucene in Action.

- switched character encoding to ISO-8850-1 from UTF-1 in Preferences/workspace in order
remove funky characters in file (cfe manual, question files, toc).

TODO: - added functionality for capturing the manual section for each exam question (both training and 
test sets).

This data serves as the basis for creating the information retrieval module that will be used
for document processing for each question.

- fixed a bug in loadBeginningPositions() method of CFEManualSmallDocUnit and CFEManualLargeDocUnit.

This bug addressed the issue of when two consecutive sections were named very similarly.
if the page number of the section is at a position that is less than the
position for the previous section, start at the position of the previous
section. Note, here, that we've added one to prevBegPos in order to
address the issue of when two consecutive sections are named very similarly.
For example, consider these two sections:
1. Computer Fraud versus Computer Crime
2. Computer Fraud
In this case, without the +1, Computer Fraud is assigned the same begPos
as Computer Fraud versus Computer Crime...! +1 provides the fix.

1.5.9

- added build files, build.xml and run_exam_1.sh template file to be built/modified in ant build.

1.5.8

- modified CFEManualApp class so that any output is directed to the "manual test output" sub-directory.


1.5.7

- added information retrieval functionality.

The ir engine, IREngine, is specific to a particular document collection directory, and as such,
will search only those documents in that particular directory.  The concept here is that for each exam
section, there will be an instance of the IREngine class whose document collection directory contains
the documents for the manual section associated with that exam section, the mapping for which is in the
cfe exam manual class.

- added classes to support the partitioning of the exam questions into a training set and a test set.

This functionality is contained in the classes of the ontol.training.set package - QuestionCollection
and TrainingAndTestSetsGenerator classes.  A random number generator is used to select a proportionate
share of questions from each exam section (i.e., it is assured that every exam section has at least 
one test question - no exam sections are left without a test question.)



1.5.6

- added functionality to support small doc unit granularity.

This enhancement provides that the text bodies of the documents in the collection are mutually
exclusive.  Under the old approach, suppose we have a document, say, "Medicare Fraud" that includes
the text of the entire section on this topic.  A subsection of this (and thus, a section that constitutes
another document in the collection, might be called "Upcoding", (named after a form of medicare fraud), 
Because the section, Upcoding, is a subsection in the document hierarchy, its section is subsumed by 
the parent section, Medicare Fraud.  Under the old approach, then, Medicare fraud's text body included the
body of the Upcoding section as well.  Now, however, after the enhancement in 1.5.6, Medicare fraud section
includes in its body only that text which is NOT included in any child section's text body.

1.5.5
- made further changes to classes in manual package to support execution from mac platform.

